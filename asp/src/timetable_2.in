%initialise
%Assume class can start from 9am to 6pm
%room(145,100).
room(308,190).
room(311,150).
%room(144,90).timeslot(m,9).
day(m). day(tu). day(w). day(th). day(f).
slot(9..17).

course(y1;;y2).
subject(hardware,145,3).
subjectincourse(hardware, y1).

subject(mathematical_methods,145,3).
subjectincourse(mathematical_methods, y1).

subject(architecture,185,3).
subjectincourse(architecture, y1).

subject(databases_i,145,3).
subjectincourse(databases_i, y1).

subject(reasoning_for_program,185,3).
subjectincourse(reasoning_for_program, y1).

subject(network, 145, 3).
subjectincourse(network, y2).

subject(operating_systems, 145, 3).
subjectincourse(operating_systems, y2).

subject(artificial_intelligence, 145, 3).
subjectincourse(artificial_intelligence, y2).

clash(operating_systems,artificial_intelligence).
clash(hardware, mathematical_methods).
clash(hardware, architecture).
clash(hardware, databases_i).
clash(hardware, reasoning_for_program).
clash(mathematical_methods, hardware).

class(hardware,308,w,9).
class(mathematical_methods,308,w,9).

%lecturer(a,6).
%lecturer(b,6).
%lecturer(c,6).
% Generate
% title room day start_hour
%{class(T,R,D,S): timeslot(D,S)} = R :- lecturer(L,R).

%Define
timeslot(D,S) :- day(D), slot(S).
0 { class(T,R,D,S) } 1 :- room(R,_), timeslot(D,S),subject(T,_,_).
class_has_enough_hours(T):- 3 { class(T,_,_,_) } 3 , subject(T,_,_).
max_six_hour_a_day(D):- { class(_,_,D,_) } 6, timeslot(D,S).
in_course(Y) :- class(T,R,D,S), timeslot(D,S), room(R,_), subject(T,_,_), subjectincourse(T,Y), course(Y).
class_with_year(T,R,D,S,Y) :- class(T,R,D,S), subjectincourse(T,Y).
% unique_timeslot(T,D,S,Y):- { class(T,_,D,S):in_course(Y) } 1, timeslot(D,S), course(Y).
% nine_to_eleven_am(T) :- class(T,_,_,S), S= 9..10.
% four_to_six_pm(T) :- class(T,_,_,S), S= 16..17.
1 { day_occupied(T,D) } 1 :- class(T,_,D,_).
max_two_day_a_week(T) :- { day_occupied(T,_) } 2, subject(T,_,_).
%Constraints
% checks if classes has been allocated properly.
:- not class_has_enough_hours(T), subject(T,_,_).
% :- not 3 { class(T,_,_,_) } 3, subject(T,_,_).

% checks if room size is big enough
%:- class(T,R,D,S), room(R,C0), subject(T,C1,_), C1 < C0.


%Each subject only takes 2 day a week
:- not max_two_day_a_week(T), subject(T,_,_).

%Each timeslot is unique
% :- not unique_timeslot(T,D,S,Y), timeslot(D,S), course(Y), not clash(T,_) | not clash(_,T).
:- class_with_year(A,_,D,S,Y), class_with_year(B,_,D,S,Y), A!=B, not clash(A,B).
%Students should not have more than six hours in any one day
:- not max_six_hour_a_day(D), timeslot(D,_).

%Same day class of same lecturer maximum 2 hours
%If the there is a 2 hour class that day make it consecutive
:- class(T,_,D,S), class(T,_,D,S+Y), Y=2..8.

%No three consecutive hour
:- class(_,_,D,S), class(_,_,D,S+1), class(_,_,D,S+2), timeslot(D,S).

%Same day same room
:- class(T,R1,D,_), class(T,R2,D,_), R1!=R2.

%No 9 to 5
% :- four_to_six_pm (T) , nine_to_eleven_am (T).



%Optimisation
%Make pack as much lessons of the same course on the same day as possible
%#minimize { |D-DD| : add(X,D,S), add(XX,DD,SS) }.


#show class_with_year/5.
% #show class_has_enough_hours/1.
% #show max_two_day_a_week/1.
